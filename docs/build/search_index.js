var documenterSearchIndex = {"docs":
[{"location":"01_install/#installation","page":"Installation & requirements","title":"Installation & requirements","text":"","category":"section"},{"location":"01_install/#Manual-installation","page":"Installation & requirements","title":"Manual installation","text":"","category":"section"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"Download the folder from Github.  First, it is necessary to install the Julia from https://julialang.org/.    Next, the user need to copy the project folder in the chosen working directory. ","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"Using REPL or the COMMAND LINE move to the working directory.  \nIf you use the COMMAND LINE, to start a Julia session run the command:","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"julia","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"To enter in the Pkg REPL  type ","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"]  ","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"Type the command ","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"activate .","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"To activate the JMAKi project, type","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"instantiate","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"at the start of the code or notebook (where you are going to do analyses) you should write ","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"using DifferentialEquations\nusing Optimization\nusing Plots\nusing Random\nusing CSV\nusing DataFrames\nusing Statistics\nusing Optim\nusing OptimizationBBO\nusing NaNMath\nusing StatsBase\nusing Tables\nusing Distributions\nusing Interpolations\nusing Peaks\nusing ChangePointDetection\nusing Lowess  \nusing  LsqFit\nusing Combinatorics\nusing MLJ\nusing SymbolicRegression\nusing Zygote\nusing DelimitedFiles\nusing BetaML\nusing DecisionTree\nusing MLJDecisionTreeInterface\ninclude(\"your_path_to_JMAKi_main_folder/src/functions.jl\")\n\n","category":"page"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"this last step is Temporary before the official realese","category":"page"},{"location":"01_install/#Package-installation","page":"Installation & requirements","title":"Package installation","text":"","category":"section"},{"location":"01_install/#Requirements","page":"Installation & requirements","title":"Requirements","text":"","category":"section"},{"location":"01_install/#Dependencies","page":"Installation & requirements","title":"Dependencies","text":"","category":"section"},{"location":"01_install/","page":"Installation & requirements","title":"Installation & requirements","text":"Julia (1.7,1.8,1.9)\nDifferentialEquations\nOptimization\nPlots\nRandom\nCSV\nDataFrames\nStatistics\nOptim\nOptimizationBBO\nNaNMath\nStatsBase\nTables\nDistributions\nInterpolations\nPeaks\nChangePointDetection\nLowess\nLsqFit\nCombinatorics","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Fitting-One-Well-Functions","page":"API","title":"Fitting One Well Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Example of link JMAKi.fitting_one_well_ODE_constrained","category":"page"},{"location":"api/","page":"API","title":"API","text":"JMAKi.fitting_one_well_ODE_constrained","category":"page"},{"location":"api/#JMAKi.fitting_one_well_ODE_constrained","page":"API","title":"JMAKi.fitting_one_well_ODE_constrained","text":"fitting_onde_well_ODE_contrained()\n\nFitting one well data with ODE constrained\n\nArguments\n\ndata::Matrix{Float63}:  dataset first row times second row OD\nname_well::String:  name of the well\nlabel_exp::String: label of the experiment\nmodel::String: ode model to use\nlb_param::Vector{Float64}:  lower bound param\nub_param::Vector{Float64}:  upper bound param\nparam=lb_param .+ (ub_param .- lb_param) ./ 2: initial guess param\noptmizator=BBO_adaptive_de_rand_1_bin_radiuslimited():  selection of optimization method\nintegrator=Tsit5():  selection of sciml integrator\ndisplay_plots=true:  display plots in julia or not\nsave_plot=false: save plots to files\npath_to_plot=\"NA\":  where to save plots\npt_avg=1: number of the point to generate intial condition\npt_smooth_derivative=7\nsmoothing=false: the smoothing is done or not?\ntype_of_smoothing=\"rolling_avg\": type of smoothing\ntype_of_loss=\"RE\": type of used loss\nblank_array=zeros(100): data of all blanks\nmultiple_scattering_correction=false: if true uses the given calibration curve to fix the data\nmethod_multiple_scattering_correction=\"interpolation\"\ncalibration_OD_curve=\"NA\":  the path to calibration curve to fix the data\nPopulationSize=300\nmaxiters=2000000\nabstol=0.00001\nthr_lowess=0.05\n\n\n\n\n\n","category":"function"},{"location":"api/#All-documentation","page":"API","title":"All documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [JMAKi]\nOrder   = [:function, :type]","category":"page"},{"location":"api/#JMAKi.cpd_local_detection-Tuple{Matrix{Float64}, Int64}","page":"API","title":"JMAKi.cpd_local_detection","text":"perform the analyses with the required change point detection algorithm typeofdetection=\"lsdd\" or piecewise linear fitting on the specific growth rate ptderivative number of point to evaluate the derivative/specific gr (if 0 numerical derivative if >1 specific gr with that size of sliding window) sizewin Int size of the used window in all of the methods\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.cpd_lsdd_profile-Tuple{Matrix{Float64}, Int64}","page":"API","title":"JMAKi.cpd_lsdd_profile","text":"evaluate change points using peak detection on a lsdd profile typeofdetection=\"lsdd\" or piecewise linear fitting on the specific growth rate ptderivative number of point to evaluate the derivative/specific gr (if 0 numerical derivative if >1 specific gr with that size of sliding window) sizewin Int size of the used window in all of the methods\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.fitting_one_well_Log_Lin-Tuple{Matrix{Float64}, String, String}","page":"API","title":"JMAKi.fitting_one_well_Log_Lin","text":"fitting single data functions log-lin\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.fitting_one_well_ODE_constrained-Tuple{Matrix{Float64}, String, String, String, Vector{Float64}, Vector{Float64}}","page":"API","title":"JMAKi.fitting_one_well_ODE_constrained","text":"fitting_onde_well_ODE_contrained()\n\nFitting one well data with ODE constrained\n\nArguments\n\ndata::Matrix{Float63}:  dataset first row times second row OD\nname_well::String:  name of the well\nlabel_exp::String: label of the experiment\nmodel::String: ode model to use\nlb_param::Vector{Float64}:  lower bound param\nub_param::Vector{Float64}:  upper bound param\nparam=lb_param .+ (ub_param .- lb_param) ./ 2: initial guess param\noptmizator=BBO_adaptive_de_rand_1_bin_radiuslimited():  selection of optimization method\nintegrator=Tsit5():  selection of sciml integrator\ndisplay_plots=true:  display plots in julia or not\nsave_plot=false: save plots to files\npath_to_plot=\"NA\":  where to save plots\npt_avg=1: number of the point to generate intial condition\npt_smooth_derivative=7\nsmoothing=false: the smoothing is done or not?\ntype_of_smoothing=\"rolling_avg\": type of smoothing\ntype_of_loss=\"RE\": type of used loss\nblank_array=zeros(100): data of all blanks\nmultiple_scattering_correction=false: if true uses the given calibration curve to fix the data\nmethod_multiple_scattering_correction=\"interpolation\"\ncalibration_OD_curve=\"NA\":  the path to calibration curve to fix the data\nPopulationSize=300\nmaxiters=2000000\nabstol=0.00001\nthr_lowess=0.05\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.initialize_res_ms-Tuple{Any}","page":"API","title":"JMAKi.initialize_res_ms","text":"Testing part\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.one_well_morris_sensitivity-Tuple{Matrix{Float64}, String, String, String, Vector{Float64}, Vector{Float64}}","page":"API","title":"JMAKi.one_well_morris_sensitivity","text":"morris sensitivity function\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.plot_data-Tuple{String, String}","page":"API","title":"JMAKi.plot_data","text":"plotting functions\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.selection_NL_fixed_interval-Tuple{Matrix{Float64}, String, String, Vector{String}, Any, Any, Any}","page":"API","title":"JMAKi.selection_NL_fixed_interval","text":"NL segementation fitting\n\n\n\n\n\n","category":"method"},{"location":"api/#JMAKi.selection_ODE_fixed_change_points-Tuple{Matrix{Float64}, String, String, Vector{String}, Any, Any, Int64}","page":"API","title":"JMAKi.selection_ODE_fixed_change_points","text":"ODE segementation fitting\n\n\n\n\n\n","category":"method"},{"location":"03_main/#API","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Simulate ODE\nStochastic simulation\nPlotting a dataset from file\nSpecific growth rate evaluation\nFitting growth rate with log-lin fitting for one well\nFitting growth rate with log-lin fitting for one file\nFitting ODE function for one well\nFitting ODE function for one file\nFitting custom ODE function\nSensitivity analysis\nModel selection\nChange points detection\nFitting segmented ODE with fixed change-point number\nFitting segmented ODE with direct search for a maximum number of change-points","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"simulating-ODE\"></a>","category":"page"},{"location":"03_main/#Simulate-ODE","page":"The main functions of JMAKi","title":"Simulate ODE","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"\n   ODE_sim(model::String, \n    n_start::Vector{Float64}, \n    tstart::Float64, \n    tmax::Float64, \n    delta_t::Float64, \n    param_of_ode::Vector{Float64}; \n    integrator = KenCarp4() \n)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs an ODE simulation of a model, considering the initial conditions, time range, and integration parameters.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"model::String: The model to simulate.\nn_start::Vector{Float64}: The starting conditions.\ntstart::Float64: The start time of the simulation.\ntmax::Float64: The final time of the simulation.\ndelta_t::Float64: The time step of the output.\nparam_of_ode::Vector{Float64}: The parameters of the ODE model.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key argument:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"integrator=KenCarp4(): The chosen solver from the SciML ecosystem for ODE integration, default KenCarp4 algorithm.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"it returns a standard SciML output (i.e., if sim =ODE_sim(...), then sim.t is the array of times and sim.u is the array of the simulation)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"simulating-stochastic\"></a>","category":"page"},{"location":"03_main/#Stochastic-simulation","page":"The main functions of JMAKi","title":"Stochastic simulation","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"    stochastic_sim(model::String,\n         n_start::Int,\n         n_mol_start::Float64,\n        tstart::Float64,\n        tmax::Float64,\n        delta_t::Float64,\n        k_1_val::Float64,\n        k_2_val::Float64,\n        alpha_val::Float64,\n        lambda::Float64,\n        n_mol_per_birth::Float64,\n        volume::Float64)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs a stochastic simulation of a model, considering cell growth and nutrient consumption over time.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"model::String: The model to simulate. PUT the options\nn_start::Int: The number of starting cells.\nn_mol_start::Float64: The starting concentration of the limiting nutrient.\ntstart::Float64: The start time of the simulation.\ntmax::Float64: The final time of the simulation.\ndelta_t::Float64: The time step for the Poisson approximation.\nk_1_val::Float64: The value of parameter k1.\nk_2_val::Float64: The value of the Monod constant.\nalpha_val::Float64: The maximum possible growth rate.\nlambda::Float64: The lag time.\nn_mol_per_birth::Float64: The nutrient consumed per division (mass).\nvolume::Float64: The volume.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if sim =stochastic_sim(...)):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"sim[1]: array of the number of individuals in the population.\nsim[2]: array of the number of biomass equivalent mass of the limiting nutrient concentration.\nsim[3]: array of the times of the simulation. ","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"plot-file\"></a>","category":"page"},{"location":"03_main/#Plotting-a-dataset-from-file","page":"The main functions of JMAKi","title":"Plotting a dataset from file","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"plot_data( label_exp::String, \n    path_to_data::String, \n    path_to_annotation::String;\n    path_to_plot=\"NA\", \n    display_plots=true ,\n    save_plot=false, \n    overlay_plots=true, \n    blank_subtraction=\"NO\", \n    average_replicate=false, \n    correct_negative=\"thr_correction\", \n    thr_negative=0.01,\n    )\n    ","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function plot all the data from .csv file Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"path_to_data::String: The path to the .csv of data\npath_to_annotation::String: The path to the .csv of annotation \nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"path_to_plot= \"NA\": Path to save the plots.\nsave_plot=false : save the plot or not\ndisplay_plots=true: Whether or not diplay the plot in julia\noverlay_plots =true : true on plot for all dataset false one plot per well\nverbose=false: Whether to enable verbose output.\npt_avg=7: Number of points to use for smoothing average.\nblank_subtraction=\"NO\": \naverage_replicate=false\nmultiple_scattering_correction=false: Whether or not correct the data qith a calibration curve.\ncalibration_OD_curve=\"NA\": The path where the .csv calibration data are located, used only if multiple_scattering_correction=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"For this function the output are saved or displayed depending on the values of key arguments.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"Specific-growth-rate-evaluation\"></a>","category":"page"},{"location":"03_main/#Specific-growth-rate-evaluation","page":"The main functions of JMAKi","title":"Specific growth rate evaluation","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"specific_gr_evaluation(data_smooted::Matrix{Float64},\n     pt_smoothing_derivative::Int)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function evaluate the specific growth rate of a growth curve","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data_smooted::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents the variable to fit (e.g., OD), see data formatting.\npt_smoothing_derivative::Int Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"log-lin-one-well\"></a>","category":"page"},{"location":"03_main/#Fitting-growth-rate-with-log-lin-fitting-for-one-well","page":"The main functions of JMAKi","title":"Fitting growth rate with log-lin fitting for one well","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":" fitting_one_well_Log_Lin(data::Matrix{Float64}, \n    name_well::String, \n    label_exp::String; \n    do_plot=false,\n    path_to_plot=\"NA\", \n    type_of_smoothing=\"rolling_avg\",\n    pt_avg=7, \n    pt_smoothing_derivative=7, \n    pt_min_size_of_win=7, \n    type_of_win=\"maximum\", \n    threshold_of_exp=0.9, \n    multiple_scattering_correction=false,\n    calibration_OD_curve =\"NA\" \n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function fits a logarithmic-linear model to a single well's data and performs analysis such as plotting and error calculation. Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents the variable to fit (e.g., OD), see data formatting.\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"do_plot=true: Whether to generate and save plots.\npath_to_plot=\"NA\": The path to save the plots, used only if do_plot=true.\npt_avg=7: The number of points to do rolling average smoothing.\npt_smoothing_derivative=7:  Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\npt_min_size_of_win=7: The minimum size of the exponential windows in the number of smoothed points.\ntype_of_win=\"maximum\": How the exponential phase window is selected (\"maximum\" or \"global_thr\").\nthreshold_of_exp=0.9: The threshold of the growth rate in quantile to define the exponential windows.\nmultiple_scattering_correction=false: Whether or not correct the data qith a calibration curve.\ncalibration_OD_curve=\"NA\": The path where the .csv calibration data are located, used only if multiple_scattering_correction=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"an array with the following contents:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_lin_log_fit = [label_exp, name_well, start of exp win,  end of exp win,  start of exp win, Maximum specific GR ,specific GR,  2 sigma  CI of GR, doubling time,doubling time - 2 sigma ,doubling time + 2 sigma  , intercept log-lin fitting, 2 sigma intercept ,R^2]","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"The plots of the log-linear fitting and of the dynamics of specific growth rate if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"log-lin-file\"></a>","category":"page"},{"location":"03_main/#Fitting-growth-rate-with-log-lin-fitting-for-one-file","page":"The main functions of JMAKi","title":"Fitting growth rate with log-lin fitting for one file","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"    fit_one_file_Log_Lin(\n    label_exp::String, \n    path_to_data::String,\n    path_to_annotation::String;\n    path_to_results = \"NA\",\n    path_to_plot= \"NA\",\n    do_plot=false, \n    verbose=false,\n    write_res=false, \n    type_of_smoothing=\"rolling_avg\", \n    pt_avg=7,\n    pt_smoothing_derivative=7, \n    pt_min_size_of_win=7, \n    type_of_win=\"maximum\", \n    threshold_of_exp=0.9, \n    blank_subtraction=\"avg_blank\", \n    fit_replicate=false, \n    correct_negative=\"thr_correction\",\n    thr_negative=0.01, \n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\" \n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function fits a logarithmic-linear model to a single file's data.  Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"label_exp::String: Label of the experiment.\npath_to_data::String: Path to the folder containing the data.\npath_to_annotation::String: Path to the annotation of the wells.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"path_to_results= \"NA\": Path to save the results.\npath_to_plot= \"NA\": Path to save the plots.\ndo_plot=false: Whether to generate and visualize plots of the data.\nverbose=false: Whether to enable verbose output.\nwrite_res= false: Whether to write results.\npt_avg=7: Number of points to use for smoothing average.\npt_smoothing_derivative=7:  Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\npt_min_size_of_win=7: Minimum size of the exponential windows in number of smoothed points.\ntype_of_win=\"maximum: How the exponential phase window is selected (\"maximum\" or \"global_thr\").\nthreshold_of_exp=0.9: Threshold of growth rate in quantile to define the exponential windows.\nblank_subtraction=\"avg_blank\": How to use blank data for subtraction (options: \"NO\", \"avgsubtraction\", \"timeavg\").\nfit_replicate=false: If true, fit the average between replicates; if false, fit all replicates independently.\ncorrect_negative=\"thr_correction: Method to correct negative values (options: \"thrcorrection\", \"blankcorrection\").\nthr_negative=0.01: Threshold value used only if correct_negative == \"thr_correction\".\nmultiple_scattering_correction=false: Whether or not correct the data with a calibration curve.\ncalibration_OD_curve=\"NA\": The path where the .csv calibration data are located, used only if multiple_scattering_correction=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"a matrix wich each column has  the following contents:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_lin_log_fit[:,1] = [label_exp, name_well, start of exp win,  end of exp win,  start of exp win, Maximum specific GR ,specific GR,  2 sigma  CI of GR, doubling time,doubling time - 2 sigma ,doubling time + 2 sigma  , intercept log-lin fitting, 2 sigma intercept ,R^2]. It can be saved into a .csv if write_res=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"The plots of the log-linear fitting and of the dynamics of specific growth rate if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"ODE-one-well\"></a>","category":"page"},{"location":"03_main/#Fitting-ODE-function-for-one-well","page":"The main functions of JMAKi","title":"Fitting ODE function for one well","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":" fitting_one_well_ODE_constrained(data::Matrix{Float64},\n    name_well::String, \n    label_exp::String,\n    model::String,\n    lb_param::Vector{Float64}, \n    ub_param::Vector{Float64}; \n    param= lb_param .+ (ub_param.-lb_param)./2,\n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(), \n    integrator =KenCarp4(autodiff=true), \n    do_plot=false, \n    path_to_plot=\"NA\", \n    pt_avg=1, \n    pt_smooth_derivative=7,\n    smoothing=false,\n    type_of_loss=\"RE\",\n    blank_array=zeros(100),\n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\" ,\n PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001\n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs constrained parameter fitting on a single well's dataset using an ordinary differential equation (ODE) model. It estimates the model parameters within specified lower and upper bounds.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents the variable to fit (e.g., OD), see data formatting.\nmodel::String: ODE model to use\nname_well::String: Name of the well.\nlabel_exp::String: Label of the experiment.\nlb_param::Vector{Float64}: Lower bounds of the model parameters.\nub_param::Vector{Float64}: Upper bounds of the model parameters.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"param= lb_param .+ (ub_param.-lb_param)./2: Initial guess for the model parameters.\n`integrator =KenCarp4(autodiff=true)' sciML integrator\noptmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited() optimizer from optimizationBBO\ndo_plot=true: Whether to generate plots or not.\npath_to_plot=\"NA\": Path to save the plots.\npt_avg=7: Number of points to generate the initial condition or do the rolling avg smoothing.\nsmoothing=false: Whether to apply smoothing to the data or not.\ntype_of_loss:=\"RE\": Type of loss function to be used. (options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\")\nblank_array=zeros(100): Data of all blanks in single array.\nverbose=false: Whether to enable verbose output.\nwrite_res=true: Whether to write results.\nmultiple_scattering_correction=false: Whether or not correct the data qith a calibration curve.\ncalibration_OD_curve=\"NA\": The path where the .csv calibration data are located, used only if multiple_scattering_correction=true.\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if results_ODE_fit =fitting_one_well_ODE_constrained(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_ODE_fit[1] an array with the following contents: [\"name of model\", \"well\", \"param_1\",\"param_2\",..,\"param_n\",\"maximum specific gr using ode\",\"maximum specific gr using data\", \"objective function value (i.e. loss of the solution)\"]","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"where ' \"param1\",\"param2\",..,\"paramn\" ' are the parameter of the selected ODE as in this [table](#ODElist)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_ODE_fit[2] the times of the fitted ODE\nresults_ODE_fit[3] the numerical solution of the fitted ODE\nThe plot of the  fitting  if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"ODE-file\"></a>","category":"page"},{"location":"03_main/#Fitting-ODE-function-for-one-file","page":"The main functions of JMAKi","title":"Fitting ODE function for one file","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"   fit_file_ODE(\n    label_exp::String,\n    path_to_data::String,\n    path_to_annotation::String,\n    model::String, \n    lb_param::Vector{Float64},\n    ub_param::Vector{Float64}; \n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(),\n    integrator = KenCarp4(autodiff=true), \n    path_to_results=\"NA\",\n    path_to_plot=\"NA\", \n    loss_type=\"RE\", \n    smoothing=false, \n    do_plot=false,\n    verbose=false, \n    write_res=false, \n    pt_avg=1, \n    pt_smooth_derivative=7,\n    blank_subtraction=\"avg_blank\", \n    fit_replicate=false, \n    correct_negative=\"thr_correction\",\n    thr_negative=0.01, \n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\" ,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001 \n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function fits an ordinary differential equation (ODE) model to a single file's data. ","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"path_to_data::String: path to the csv file of data\npath_to_annotation::String path to the annotation of the dataset\nmodel::String: ODE model to use\nlabel_exp::String: Label of the experiment.\nlb_param::Vector{Float64}: Lower bounds of the model parameters.\nub_param::Vector{Float64}: Upper bounds of the model parameters.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"param= lb_param .+ (ub_param.-lb_param)./2: Initial guess for the model parameters.\n`integrator =KenCarp4(autodiff=true)' sciML integrator\noptmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited() optimizer from optimizationBBO\ndo_plot=true: Whether to generate plots or not.\npath_to_plot=\"NA\": Path to save the plots.\npt_avg=7: Number of points to generate the initial condition or do the rolling avg smoothing.\nsmoothing=false: Whether to apply smoothing to the data or not.\ntype_of_loss:=\"RE\": Type of loss function to be used. (options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\")\nblank_array=zeros(100): Data of all blanks in single array.\nverbose=false: Whether to enable verbose output.\nwrite_res=true: Whether to write results.\nmultiple_scattering_correction=false: Whether or not correct the data qith a calibration curve.\ncalibration_OD_curve=\"NA\": The path where the .csv calibration data are located, used only if multiple_scattering_correction=true.\nfit_replicate=false,  if true the average between replicates is fitted.\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if results_ODE_fit =fit_file_ODE(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_ODE_fit[1] a matrix with the following contents for each column: [\"name of model\", \"well\", \"param_1\",\"param_2\",..,\"param_n\",\"maximum specific gr using ode\",\"maximum specific gr using data\", \"objective function value (i.e. loss of the solution)\"]. It can be saved into a .csv if write_res=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"where ' \"param1\",\"param2\",..,\"paramn\" ' are the parameter of the selected ODE as in this [table](#ODElist)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"The plot of the  fitting  if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"custom-ODE\"></a>","category":"page"},{"location":"03_main/#Fitting-custom-ODE-function-for-one-well","page":"The main functions of JMAKi","title":"Fitting custom ODE function for one well","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"fitting_one_well_custom_ODE(data::Matrix{Float64},\n    name_well::String, \n    label_exp::String,\n    model::Any, \n    lb_param::Vector{Float64}, \n    ub_param::Vector{Float64},\n    n_equation::Int; \n    param= lb_param .+ (ub_param.-lb_param)./2,\n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(), \n    integrator =KenCarp4(autodiff=true),\n    do_plot=false, \n    path_to_plot=\"NA\", \n    pt_avg=1, \n    pt_smooth_derivative=7,\n    smoothing=false, \n    type_of_loss=\"RE\", \n    blank_array=zeros(100), \n    multiple_scattering_correction=false,\n    calibration_OD_curve=\"NA\"  ,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001\n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function is designed for fitting an ordinary differential equation (ODE) model to a dataset representing the growth curve of a microorganism in a well. It utilizes a customizable ODE model, optimization methods, and integration techniques for parameter estimation.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents the variable to fit (e.g., OD), see data formatting.\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.\nmodel::Any: The ODE model to use.\nlb_param::Vector{Float64}: Lower bounds for the parameters.\nub_param::Vector{Float64}: Upper bounds for the parameters.\nn_equation::Int: The number of ODEs in the system.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if results_ODE_fit =fitting_one_well_custom_ODE(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_ODE_fit[1] a matrix with the following contents for each column: [\"name of model\", \"well\", \"param_1\",\"param_2\",..,\"param_n\",\"maximum specific gr using ode\",\"maximum specific gr using data\", \"objective function value (i.e. loss of the solution)\"]. It can be saved into a .csv if write_res=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"where ' \"param1\",\"param2\",..,\"paramn\" ' are the parameter of the selected ODE as in this [table](#ODElist)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"The plot of the  fitting  if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key   Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"param= lb_param .+ (ub_param.-lb_param)./2: Initial guess for the parameters.\noptmizator=BBO_adaptive_de_rand_1_bin_radiuslimited(): The optimization method to use.\nintegrator=KenCarp4(autodiff=true): The integrator for solving the ODE.\ndo_plot=false: Whether to generate plots or not.\npath_to_plot=\"NA\": Path to save the generated plots.\npt_avg=1: Number of points to generate the initial condition or do the rolling avg smoothing.\npt_smooth_derivative=7: Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\nsmoothing=false: Determines whether smoothing is applied to the data.\ntype_of_loss=\"RE\": Type of loss used for optimization (options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\")\nblank_array=zeros(100): Data representing blanks for correction.\nmultiple_scattering_correction=false: If true, uses a given calibration curve to correct the data.\ncalibration_OD_curve=\"NA\": The path to the calibration curve used for data correction.\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"Sensitivity-analysis\"></a>","category":"page"},{"location":"03_main/#Sensitivity-analysis","page":"The main functions of JMAKi","title":"Sensitivity analysis","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":" one_well_morris_sensitivity(data::Matrix{Float64}, \n    name_well::String,\n    label_exp::String, \n    model::String, \n    lb_param::Vector{Float64}, \n    ub_param::Vector{Float64}; \n    N_step_morris =7,\n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(), \n    integrator =KenCarp4(autodiff=true), \n    pt_avg=1, \n    pt_smooth_derivative=7,\n    write_res=false,\n    smoothing=false,\n    type_of_loss=\"RE\", \n    blank_array=zeros(100),\n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\"  ,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001\n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function is designed to perform Morris sensitivity analysis on a dataset representing the growth curve of a microorganism in a well. It assesses the sensitivity of the model to variations in input parameters of the optimization.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents optical density (OD).\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.\nmodel::String: The ODE model to use.\nlb_param::Vector{Float64}: Lower bounds for the parameters.\nub_param::Vector{Float64}: Upper bounds for the parameters.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"N_step_morris=7: Number of steps for the Morris sensitivity analysis.\noptmizator=BBO_adaptive_de_rand_1_bin_radiuslimited(): The optimization method to use.\nintegrator=KenCarp4(autodiff=true): The integrator for solving the ODE.\npt_avg=1: Number of points to generate the initial condition or do the rolling avg smoothing.\npt_smooth_derivative=7: Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\nwrite_res=false: If true, writes the sensitivity analysis results to a file.\nsmoothing=false: Determines whether smoothing is applied to the data.\ntype_of_loss=\"RE\": Type of loss used for optimization (options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\")\nblank_array=zeros(100): Data representing blanks for correction.\nmultiple_scattering_correction=false: If true, uses a given calibration curve to correct the data.\ncalibration_OD_curve=\"NA\": The path to the calibration curve used for data correction.\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if results_ODE_morris_sensitivity =one_well_morris_sensitivity(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"results_ODE_morris_sensitivity[1] a with in each column the initial guess for the parameters of the optimization in the same order of table\nresults_ODE_morris_sensitivity[2] a matrix with the following contents for each column: [\"name of model\", \"well\", \"param_1\",\"param_2\",..,\"param_n\",\"maximum specific gr using ode\",\"maximum specific gr using data\", \"objective function value (i.e. loss of the solution)\"]. It can be saved into a .csv if write_res=true.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"where ' \"param1\",\"param2\",..,\"paramn\" ' are the parameter of the selected ODE as in this [table](#ODElist)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"The plot of the  fitting  if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"Model-selection\"></a>","category":"page"},{"location":"03_main/#Model-selection","page":"The main functions of JMAKi","title":"Model selection","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"ODE_Model_selection(data::Matrix{Float64}, \n    name_well::String, \n    label_exp::String,\n    models_list::Vector{String}, \n    lb_param_array::Any,\n    ub_param_array::Any; \n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(), \n    integrator = KenCarp4(autodiff=true), \n    pt_avg = 1 , \n    beta_penality = 2.0, \n    smoothing= false, \n    type_of_loss=\"L2\",\n    blank_array=zeros(100), \n    plot_best_model=false, \n    path_to_plot=\"NA\",\n    pt_smooth_derivative=7,\n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\", \n    verbose=false,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001\n)","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs model selection based on a dataset representing the growth curve of a microorganism in a well. It evaluates multiple ODE models and selects the best-fitting model using the Akaike Information Criterion (AIC).","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents optical density (OD).\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.\nmodels_list::Vector{String}: A vector of ODE models to evaluate.\nlb_param_array::Any: Lower bounds for the parameters (compatible with the models).\nub_param_array::Any: Upper bounds for the parameters (compatible with the models).","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"optmizator=BBO_adaptive_de_rand_1_bin_radiuslimited(): The optimization method to use.\nintegrator=KenCarp4(autodiff=true): The integrator for solving the ODE.\npt_avg=1: Number of points to generate the initial condition or do the rolling avg smoothing.\nbeta_penality=2.0: Penalty for AIC evaluation.\nsmoothing=false: Determines whether smoothing is applied to the data.\ntype_of_loss=\"L2\": Type of loss used for optimization (options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\")\nblank_array=zeros(100): Data representing blanks for correction.\nplot_best_model=false: If true, the results of the best-fit model will be plotted.\npath_to_plot=\"NA\": Path to save the generated plots.\npt_smooth_derivative=7: Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\nmultiple_scattering_correction=false: If true, uses a given calibration curve to correct the data.\ncalibration_OD_curve=\"NA\": The path to the calibration curve used for data correction.\nverbose=false: If true, enables verbose output.\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if Model_selection =ODE_Model_selection(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Model_selection[1] a Matrix containing the loss and the AIC score for each model.\nModel_selection[2] a Tuple containing all the fitted models.\nModel_selection[3] the AIC score of the best model\nModel_selection[4] , the loss of the best model\nModel_selection[5] , the parameter of the best model\nModel_selection[6] , the string of the best model\nModel_selection[7] , the numerical solution of the fitted ODE\nThe plot of the  fitting of the best model if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"cdp\"></a>","category":"page"},{"location":"03_main/#Change-point-detection","page":"The main functions of JMAKi","title":"Change point detection","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"cpd_local_detection(data::Matrix{Float64},\n    n_max_cp::Int;\n    type_of_detection=\"lsdd\",\n    type_of_curve=\"original\", \n    pt_derivative = 0,\n    size_win =2,\nmethod= \"peaks_prominence\",\nnumber_of_bin = 40)\n","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs change point detection on a dataset, identifying local changes in the growth curve. It uses various algorithms based on user-defined parameters.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents optical density (OD).\nn_max_cp::Int: The maximum number of change points to detect.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"type_of_detection=\"lsdd\": Type of change point detection algorithm. Options are \"lsdd\" or piecewise linear fitting \ntype_of_curve=\"deriv\": Type of curve used for the change point detection. Options are \"deriv\" for the  derivative/specific gr or \"original\" for growth curve.\npt_derivative=0: Number of points to evaluate the derivative or specific growth rate. If 0, numerical derivative is used; if >1, specific growth rate is calculated with the given window size.\nsize_win=2: Size of the sliding window used in all detection methods.\nmethod = \"peaks_prominence\" : method to detect peak on the dissimilarity curve. Option \"peaksprominence\" use prominece of peaks to score them. `\"thrscan\"` grid scan with a threshold to detect peaks.\nnumber_of_bin = 40: number of bins for the grid search. used only if method = \"thr_scan\"","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if cdps =cpd_local_detection(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"cdps[1] Indexes of the detected change points","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"cdp-fixed\"></a>","category":"page"},{"location":"03_main/#Fitting-segmented-ODE-with-fixed-change-point-number","page":"The main functions of JMAKi","title":"Fitting segmented ODE with fixed change-point number","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"selection_ODE_fixed_change_points(data_testing::Matrix{Float64}, \n    name_well::String,\n    label_exp::String,\n    list_of_models::Vector{String}, \n    list_lb_param::Any,\n    list_ub_param::Any, \n    n_change_points::Int;\n    type_of_loss=\"L2\", \n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(), \n    integrator = KenCarp4(autodiff=true), \n    type_of_detection =  \"lsdd\",\n    type_of_curve = \"original\", \n    smoothing=false,\n    pt_avg=1,\n    do_plot=false, \n    path_to_plot=\"NA\", \n    win_size=2, \n    pt_smooth_derivative=0,\n    multiple_scattering_correction=false, \n    calibration_OD_curve=\"NA\",\n    beta_smoothing_ms = 2.0,\nmethod_peaks_detection= \"peaks_prominence\",\nn_bins = 40,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001\n    )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function performs model selection for ordinary differential equation (ODE) models while considering fixed change points in a growth curve dataset. It allows for the evaluation of multiple ODE models and considers a specified number of change points.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data_testing::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents optical density (OD).\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.\nlist_of_models::Vector{String}: A vector of ODE models to evaluate.\nlist_lb_param::Any: Lower bounds for the parameters (compatible with the models).\nlist_ub_param::Any: Upper bounds for the parameters (compatible with the models).","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"n_change_points::Int: The number of fixed change points to consider.\ntype_of_loss=\"L2\": Type of loss used for optimization(options= \"RE\", \"L2\", \"L2derivative\" and \"blankweighted_L2\").\noptmizator=BBO_adaptive_de_rand_1_bin_radiuslimited(): The optimization method to use.\nintegrator=KenCarp4(autodiff=true): The integrator for solving the ODE.\ntype_of_detection=\"lsdd\": Type of change point detection algorithm. Options are \"lsdd\" or piecewise linear fitting \ntype_of_curve=\"original\": Type of curve used for the change point detection. Options are \"deriv\" for the  derivative/specific gr or \"original\" for growth curve.\nsmoothing=false: Determines whether smoothing is applied to the data.\npt_avg=1: Number of points to generate the initial condition or do the rolling avg smoothing.\ndo_plot=false: Whether to generate plots or not.\npath_to_plot=\"NA\": Path to save the generated plots.\nwin_size=2: Number of points for the  window of the change point detection algorithm.\npt_smooth_derivative=0: Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\nmultiple_scattering_correction=false: If true, uses a given calibration curve to correct the data.\ncalibration_OD_curve=\"NA\": The path to the calibration curve used for data correction.\nbeta_smoothing_ms=2.0: Penality parameter of the Akaike Information Criterion (AIC) penalty.\nmethod_peaks_detection = \"peaks_prominence\" : method to detect peak on the dissimilarity curve. Option \"peaksprominence\" use prominece of peaks to score them. `\"thrscan\"` grid scan with a threshold to detect peaks.\nn_bins = 40: number of bins for the grid search. used only if method_peaks_detection = \"thr_scan\"\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if res =selection_ODE_fixed_change_points(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"res[1]. Parameters of each segment\nres[2]. Interval of the ODE segment\nres[3]. Time of the fitted solution\nres[4]. Numerical fitted solution\nThe plot of the  fitting if do_plot=true","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"<a name=\"cdp-search\"></a>","category":"page"},{"location":"03_main/#Fitting-segmented-ODE-with-direct-search-for-a-maximum-number-of-change-points","page":"The main functions of JMAKi","title":"Fitting segmented ODE with direct search for a maximum number of change-points","text":"","category":"section"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"ODE_selection_NMAX_change_points(data_testing::Matrix{Float64}, \n    name_well::String, \n    label_exp::String, \n    list_lb_param::Any, \n    list_ub_param::Any, \n    list_of_models::Vector{String}, \n    n_max_change_points::Int; \n    optmizator =   BBO_adaptive_de_rand_1_bin_radiuslimited(),  \n    integrator = KenCarp4(autodiff=true),\n    type_of_loss=\"L2\", # type of used loss \n    type_of_detection =  \"lsdd\",\n    type_of_curve = \"original\", \n    pt_avg = 1 , \n    smoothing= true, \n    do_plot=false, \n    path_to_plot=\"NA\", \n    path_to_results=\"NA\",\n    win_size=2, \n    pt_smooth_derivative=7,\n    penality_parameter=2.0,\n    multiple_scattering_correction=\"false\", \n    calibration_OD_curve=\"NA\",  \n   save_all_model=false,\n    method_peaks_detection= \"peaks_prominence\",\n    n_bins = 40,\n   PopulationSize =100,\n          maxiters = 10000,\n           abstol = 0.001 )","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"This function fits segmented ordinary differential equation (ODE) models to a growth curve dataset using direct search for a maximum number of change-points. It allows for the evaluation of multiple ODE models with a varying number of change-points.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"data_testing::Matrix{Float64}: The dataset with the growth curve, where the first row represents times, and the second row represents optical density (OD) or fluorescence.\nname_well::String: The name of the well.\nlabel_exp::String: The label of the experiment.\nlist_lb_param::Any: Lower bounds for the parameters (compatible with the models).\nlist_ub_param::Any: Upper bounds for the parameters (compatible with the models).\nlist_of_models::Vector{String}: A vector of ODE models to evaluate.\nn_max_change_points::Int: The maximum number of change-points to consider.","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Key Arguments:","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"optmizator=BBO_adaptive_de_rand_1_bin_radiuslimited(): The optimization method to use.\nintegrator=KenCarp4(autodiff=true): The integrator for solving the ODE.\ntype_of_loss=\"L2\": Type of loss used for optimization (options: \"L2\" for squared loss).\ntype_of_detection=\"lsdd\": Type of change point detection algorithm. Options are \"lsdd\" for piecewise linear fitting on the specific growth rate.\ntype_of_curve=\"original\": Type of curve used for the change point detection. Options are \"deriv\" for the  derivative/specific gr or \"original\" for growth curve.\npt_avg=1: Number of points to generate the initial condition or do the rolling avg smoothing.\nsmoothing=true: Determines whether smoothing is applied to the data.\ndo_plot=false: Whether to generate plots or not.\npath_to_plot=\"NA\": Path to save the generated plots.\npath_to_results=\"NA\": Path to save the fitting results.\nwin_size=2: Number of points for the  window of the change point detection algorithm.\npt_smooth_derivative=0: Number of points for evaluation of specific growth rate. If <2 it uses interpolation algorithm otherwise a sliding window approach.\npenality_parameter=2.0: Parameter for penalizing the change in the number of parameters.\nmultiple_scattering_correction=false: If true, uses a given calibration curve to correct the data.\ncalibration_OD_curve=\"NA\": The path to the calibration curve used for data correction.\nsave_all_model=false: If true, saves fitting results for all evaluated models.\nmethod_peaks_detection = \"peaks_prominence\" : method to detect peak on the dissimilarity curve. Option \"peaksprominence\" use prominece of peaks to score them. `\"thrscan\"` grid scan with a threshold to detect peaks.\nn_bins = 40: number of bins for the grid search. used only if method_peaks_detection = \"thr_scan\"\nPopulationSize =100: Size of the population of the optimization\nmaxiters = 10000: stop criterion, the optimization is stopped when the number of iteration is bigger than abstol\nabstol = 0.001: stop criterion, the optimization is stopped when the loss is lesser than abstol","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"Output (if res =ODE_selection_NMAX_change_points(...):","category":"page"},{"location":"03_main/","page":"The main functions of JMAKi","title":"The main functions of JMAKi","text":"res[1]. The  parameters of each segment of the top model\nres[2]. Time of the fitted solution\nres[3]. Numerical fitted solution\nThe plot of the  fitting if do_plot=true\nIf save_all_model=true the best segnmented model is saved for each number of change points between 0 and n_max_change_points","category":"page"},{"location":"04_math/#models","page":"The mathematical models","title":"The mathematical models","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"ODEs for bacterial growth\n Stochastic models for bacterial growth\nType of loss","category":"page"},{"location":"04_math/#ODEs-for-bacterial-growth","page":"The mathematical models","title":"ODEs for bacterial growth","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"TO DO","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The models and their parameters are sumarrized in the following table | Model                                  |  Parameters                                       | | –––––––––––––––––––- | –––––––––––––––––––––––––––– | | Diauxicpiecewisedampedlogistic      | gr1, Nmax, shape1, lag, linearconst, tshift, gr2, Nmax2, shape2, endsecondlag, lag2gr | | Diauxicreplicator1                    | gr, Nmax, lag, arbitraryconst, linearconst | | Diauxicreplicator2                    | gr, Nmax, lag, arbitraryconst, linearconst, growthstationary | | HPM                                    | gr, exitlagrate, Nmax | | dHPM                                    | gr, exitlagrate, Nmax,shape | | HPM3death                            | gr, exitlagrate, inactivationrate, deathrate | | HPM3deathresistance                 | gr, exitlagrate, inactivationrate, deathrate, nres, nmax | | HPM3inhibition                       | gr, exitlagrate, inactivationrate | | HPMinhibition                         | gr, inhibitionrate, grinhibition, Nmax | | HPMexp                                | gr, exitlagrate | | ODEsHPMSR                            | gr, grphage, scale, deathrate, resistancerate | | baranyiexp                            | gr, lagtime, shape | | baranyirichards                       | gr, Nmax, lagtime, shape | | baranyiroberts                        | gr, Nmax, lagtime, shape1, shape2 | | bertalanffyrichards                   | gr, Nmax, shape | | exponential                             | gr | | fourpiecewise                          | gr, gr2, gr3, gr4, lag, tdecaygr, tstationary | | gbsmpiecewise                         | gr, a1, b1, c, a2, b2 | | gompertz                               | gr, Nmax | | hypergompertz                         | gr, Nmax, shape | | hyperlogistic                         | doublingtime, gr, Nmax, shape | | huang                                  | gr, Nmax, lag | | logistic                               | gr, Nmax | | logistic                               | gr, Nmax, shape | | odevonbertalanffy                    | alpha, beta, a, b | | piecewisedampedlogistic              | gr, Nmax, lag, shape, linearconst | | triplepiecewise                       | gr, gr2, gr3, lag, tstationary | | triplepiecewisebertalanffyrichards  | gr, grlag, tlag, tstationary, grstat, shape, Nmax | | triplepiecewisedampedlogistic       | gr, gr2, gr3, lag, tstationary, Nmax | | triplepiecewisesublinear             | gr, gr2, gr3, lag, tstationary, N_max |","category":"page"},{"location":"04_math/#Stochastic-models-for-bacterial-growth","page":"The mathematical models","title":"Stochastic models for bacterial growth","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"In the stochastic version of the growth models, the growth rate of each population component (denoted as mu_i) is evaluated based on the concentration of the limiting nutrient. The user is required to specify the starting amount of nutrients and the volume of the solution. Various kinetic growth models are considered.","category":"page"},{"location":"04_math/#Monod-Model","page":"The mathematical models","title":"Monod Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Monod model is described by the following equation:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 mu_textmax) = mu_textmax fractextNutk_1 + textNut","category":"page"},{"location":"04_math/#Haldane-Model","page":"The mathematical models","title":"Haldane Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Haldane model is expressed as:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 k_2 mu_textmax) = mu_textmax fractextNutk_1 + textNut + frack_2textNut^2","category":"page"},{"location":"04_math/#Blackman-Model","page":"The mathematical models","title":"Blackman Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Blackman model is given by:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 mu_textmax) = mu_textmax fractextNutk_1 + textNut","category":"page"},{"location":"04_math/#Tessier-Model","page":"The mathematical models","title":"Tessier Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Tessier model is represented as:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 mu_textmax) = mu_textmax (1 - e^k_1textNut )","category":"page"},{"location":"04_math/#Moser-Model","page":"The mathematical models","title":"Moser Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Moser model is defined by:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 k_2 mu_textmax) = mu_textmax fractextNut^k_2k_1 + textNut^k_2","category":"page"},{"location":"04_math/#Aiba-Edwards-Model","page":"The mathematical models","title":"Aiba-Edwards Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Aiba-Edwards model is given by:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(textNut k_1 k_2 mu_textmax) = mu_textmax fractextNutk_1 + textNut e^-fractextNutk_2","category":"page"},{"location":"04_math/#Verhulst-Model","page":"The mathematical models","title":"Verhulst Model","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"The Verhulst model is defined as:","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mu(N N_textmax mu_textmax) = mu_textmax left(1 - fracNN_textmaxright)","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"Where textNut is the limiting nutrient concentration, mu_textmax is the maximum possible growth rate, k_1 and k_2 are numerical constants with meanings depending","category":"page"},{"location":"04_math/#Type-of-loss-functions","page":"The mathematical models","title":"Type of loss functions","text":"","category":"section"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"type_of_loss = \"L2\": Minimize the L2 norm of the difference between the numerical solution of an ODE and the given data.","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mathcalD(D(t_i) barN(t_i P)) = left(D(t_i) - barN(t_i P)right)^2","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"type_of_loss = \"L2_derivative\": Minimize the L2 norm of the difference between the derivatives of the numerical solution of an ODE and the corresponding derivatives of the data.","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"type_of_loss =\"RE\": Minimize the relative error between the solution and data ","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mathcalD(D(t_i) barN(t_i P)) = 05 cdot left(1 - fracD(t_i)barN(t_i P)right)^2","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"type_of_loss = \"blank_weighted_L2\" : Minimize a weighted version of the L2 norm, where the difference between the solution and data is weighted based on a distribution obtained from empirical blank data. ","category":"page"},{"location":"04_math/","page":"The mathematical models","title":"The mathematical models","text":"mathcalD(D(t_i) barN(t_i P)) = (1 - P(D(t_i) - barN(t_i P)textnoise)) cdot left(D(t_i) - barN(t_i P)right)^2","category":"page"},{"location":"05_examples/#examples","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"This section provides some copy-and-paste examples of JMAKi.jl","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Simulating Data with ODEs -Simulating Data with ODEs -Simulating Data with stochastic simulations\nData Preprocessing\nFitting single well\nLog-Lin fitting\nFitting ODE Models\nCustom ODE Fitting\nSensitivity Analysis\nODE Model Selection","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Fitting one file (a plate)\nPlot one file\nLog-Lin fitting\nFitting ODE Models\nODE segmentation with fixed number of change points\nODE segmentation","category":"page"},{"location":"05_examples/#Simulating-Data","page":"Examples and Tutorial","title":"Simulating Data","text":"","category":"section"},{"location":"05_examples/#Simulating-Data-with-ODEs","page":"Examples and Tutorial","title":"Simulating Data with ODEs","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"To simulate data using Ordinary Differential Equations (ODEs):","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Simulating data with an ODE\nmodel = \"triple_piecewise_damped_logistic\"\nn_start = [0.1]\ntstart = 0.0\ntmax = 600.0\ndelta_t = 10.0\n\nparam_of_ode = [0.06, 1.0, 200, 0.5, 0.001, 450, -0.0002]\n\n# Calling the simulation function\nsim = ODE_sim(model, n_start, tstart, tmax, delta_t, param_of_ode)\n\n# Plotting scatterplot of data\nPlots.scatter(sim, xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Data \" nothing], color=:blue, size=(300, 300))","category":"page"},{"location":"05_examples/#Simulating-Data-with-stochastic-simulations","page":"Examples and Tutorial","title":"Simulating Data with stochastic simulations","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"To simulate data using  stochastic models:","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"sim =stochastic_sim(\"Monod\", #string of the model\n   1, # number of starting cells\n   10000.1, # starting # molecules (in \"biomass units\") of the limiting nutrients\n    0.0, # start time of the sim\n    2000.0, # final time of the sim\n    0.1, # delta t for poisson approx\n    11.1,\n    10.1, # monod constant\n    0.06, # massimum possible growth rate\n   10.0, # lag time\n    0.0000001,# nutrient consumed per division (conc)\n    1000.0 #volume\n)\nplot(sim[3],sim[1], xlabel=\"Time\",ylabel=\"# of indivuals\")\nplot(sim[3],sim[2], xlabel=\"Time\",ylabel=\"nutrients/volume\")\n\ndata_OD = Matrix(transpose(hcat(sim[3],sim[1])))","category":"page"},{"location":"05_examples/#Data-Preprocessing","page":"Examples and Tutorial","title":"Data Preprocessing","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"We start applying a rolling average smoothing to the data. In the example, a rolling window of size 7 is applied to the original data (data_OD generated in the previous examples). ","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"data_ODsmooth = smoothing_data(data_OD, 7)\ndata_ODsmooth = Matrix(data_ODsmooth)\n\n# Plotting scatterplot of smoothed data\nPlots.scatter(data_ODsmooth[1, :], data_ODsmooth[2, :], xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Smoothed data \" nothing], markersize=2, color=:blue, size=(300, 300))","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Furthermore, to address potential external influences, a correction for multiple scattering is applied to the smoothed data. This correction is executed through the correctionODmultiplescattering function, requiring an external file (calibrationcurve.csv).  it is  optional in the provided example. ","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"\n# Multiple scattering correction (optional, comment out if not needed)\ndata_ODsmooth = correction_OD_multiple_scattering(data_ODsmooth, \"/your_path/calibration_curve.csv\")\n\n# Plotting scatterplot of preprocessed data\nPlots.scatter(data_ODsmooth[1, :], data_ODsmooth[2, :], xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Pre-processed data\" nothing], markersize=2, color=:blue, size=(300, 300))","category":"page"},{"location":"05_examples/#Fitting-single-well","page":"Examples and Tutorial","title":"Fitting single well","text":"","category":"section"},{"location":"05_examples/#Log-Lin-fitting","page":"Examples and Tutorial","title":"Log-Lin fitting","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"This code snippet performs log-linear fitting using the fittingonewellLogLin function (of data generated in the previous examples). ","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"res_log_lin = fitting_one_well_Log_Lin(\n    data_OD,  # dataset, first row times, second row OD\n    \"test\",           # name of the well\n    \"test\"            # label of the experiment\n)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The results are stored in the resloglin variable. With the following form","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"results_lin_log_fit = [label_exp, name_well, start_exp_win, end_exp_win, time_max_gr ,gr_of_max, gr_log_lin_fitting, 2_sigma_confidence_gr, doubling time , doubling time  - 2 sigma,  doubling time  + 2 sigma, intercept log-lin fitting, ntercept log-lin fitting 2 sigma ,R^2]\n","category":"page"},{"location":"05_examples/#Fitting-ODE-Models","page":"Examples and Tutorial","title":"Fitting ODE Models","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Before fitting, upper and lower bounds for the ODE parameters are defined ","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"\n# Upper bounds of the parameters of the ODE\nub_dhpm = [1.2, 1.1, 2.0, 20]\n\n# Lower bounds of the parameters of the ODE\nlb_dhpm = [0.0001, 0.00000001, 0.00, 0]","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The actual fitting is accomplished through the fittingonewellODEconstrained function. This function takes the  dataset (dataOD generated in the previous examples), the name and label of the well, the ODE model to use (\"dHPM\" in this case), as well as the upper and lower bounds for the ODE parameters. Additionally, the function allows for plotting the results (doplot=true) and specifying the path to save the generated plots (pathtoplot=pathtoplotting).","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Performing ODE fitting\nresults_ODE_fit = fitting_one_well_ODE_constrained(\n    data_OD, \"\", \"\", \"dHPM\", lb_dhpm, ub_dhpm,\n    do_plot=true, path_to_plot=\"path_to_plotting\"\n)\n","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The results are stored in 'resultsODEfit' with the following format","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":" results_ODE_fit = [\"name of model\", \"well\", \"param_1\",\"param_2\",..,\"param_n\",\"maximum specific gr using ode\",\"maximum specific gr using data\", \"objective function value (i.e. loss of the solution)\"]","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"where ' \"param1\",\"param2\",..,\"paramn\" ' are the parameter of the selected ODE as in this [table](#ODElist)","category":"page"},{"location":"05_examples/#Custom-ODE-Fitting","page":"Examples and Tutorial","title":"Custom ODE Fitting","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The custom ODE function (ODE_custom) is defined with specific dynamics tailored to the characteristics of the microbial system. In this example, the function computes the rates of change (du) for two state variables (u) based on the provided parameters (param) and time (t). The specific structure of this function should be adjusted to match the dynamics of the microbial system under investigation.","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"\n# Custom ODE function\nfunction ODE_custom(du, u, param, t)\n    du[1] = u[1] * (1 - u[1]) * param[2] + param[1] * u[1]\n    du[2] = u[1] * param[2] + param[4] * u[2] * (1 - (u[1] + u[2]) / param[3])\nend\n","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The upper and lower bounds for the custom ODE parameters (customub and customlb) are defined, and the fitting process is initiated using the fittingonewellcustomODE function. This function takes the  dataset (dataOD  generated in the previous examples), the name and label of the well, the custom ODE function (ODEcustom), and the upper and lower bounds for the ODE parameters. Additionally, the number of ODEs in the system is specified (2 in this example). The results can be visualized through plotting (doplot=true) with the option to save the generated plots (pathtoplot=pathto_plotting).","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Bounds for the custom ODE parameters\ncustom_ub = [1.2, 1.1, 2.0, 20]\ncustom_lb = [0.0001, 0.00000001, 0.00, 0]\n\n# Performing custom ODE fitting\nresults_ODE_fit = fitting_one_well_custom_ODE(\n    data_OD, \"test\", \"test_model_custom\", ODE_custom,\n    custom_lb, custom_ub, 2,\n    do_plot=true, path_to_plot=path_to_plotting\n)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The results are stored in 'resultsODEfit' with the same format of the previous examples","category":"page"},{"location":"05_examples/#Sensitivity-Analysis","page":"Examples and Tutorial","title":"Sensitivity Analysis","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The sensitivity analysis is initiated with the onewellmorrissensitivity function. This function takes the preprocessed dataset (dataOD generated in the previous examples), the name and label of the well, the ODE model to use (\"dHPM\" in this case), as well as the lower and upper bounds for the ODE parameters. The number of steps in the Morris method (nstepsensitivity) is specified to control the granularity of the analysis.","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Number of steps for Morris sensitivity analysis\nn_step_sensitivity = 3\n\n# Performing Morris sensitivity analysis\nsensitivity_test = one_well_morris_sensitivity(\n    data_OD, \"test\", \"test_sensitivity\", \"dHPM\", lb_dhpm, ub_dhpm,\n    N_step_morris=n_step_sensitivity\n)\n","category":"page"},{"location":"05_examples/#ODE-Model-Selection","page":"Examples and Tutorial","title":"ODE Model Selection","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Several ODE models are considered for the selection process, each defined by upper (list_ub) and lower (list_lb) bounds for their respective parameters. The models include \"dHPM,\" \"piecewisedampedlogistic,\" \"triplepiecewise,\" and \"baranyiroberts.\"","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Model candidates and their parameter bounds\nlist_of_models = [\"dHPM\", \"piecewise_damped_logistic\", \"triple_piecewise\", \"baranyi_roberts\"]\n\nub_piece_wise_logistic =[ 0.06 , 2.0 , 500.0 , 10.0 ,  0.001    ]\nlb_piece_wise_logistic =[ 0.0001 , 0.001,0.0  , 0.001 ,  - 0.001  ]\nub_baranyi_roberts =[ 0.06 , 2.0 , 500.0 , 10.0,  10   ]\nlb_baranyi_roberts =[ 0.0001 , 0.001, 0.0 ,  0.01 , 0  ]\nub_triple_exp =[ 1.2 , 0.001 ,  0.2 , 500.0  , 2000   ]\nlb_triple_exp =[ 0.0001 , -0.001, 0.0  , 00.0 ,  200.0   ]\nub_dhpm =[ 1.2 , 1.1 , 2.0  ,20  ]\nlb_dhpm =[ 0.0001 , 0.00000001, 0.00 ,0 ]\n\nlist_ub = [ub_dhpm, ub_piece_wise_logistic, ub_triple_exp, ub_baranyi_roberts]\nlist_lb = [lb_dhpm, lb_piece_wise_logistic, lb_triple_exp, lb_baranyi_roberts]","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The model selection process is initiated with the ODE_Model_selection function. This function takes the preprocessed dataset (data_OD generated in the previous examples), the name and label of the well, the list of models, and their respective upper and lower bounds. Additionally, the function allows for plotting the results of the best-fit model (plot_best_model=true) and specifies the path to save the generated plots (path_to_plot=path_to_plotting). The verbose=true option provides detailed output during the model selection process.","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Performing model selection\nresults_ms = ODE_Model_selection(\n    data_OD, \"test\", \"test_model_selection\",\n    list_of_models, list_lb, list_ub,\n    plot_best_model=true, path_to_plot=path_to_plotting, verbose=true\n)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The results of the model selection process are stored in the results_ms variable.","category":"page"},{"location":"05_examples/#Fitting-one-file-(a-plate)","page":"Examples and Tutorial","title":"Fitting one file (a plate)","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The next three functions work directly on a file. So in this case are mandatory the .csv of data and annotation (see  Data and annotation formatting ). Aslo in XXXXX the user can download an examples of data and annotation.","category":"page"},{"location":"05_examples/#Plot-one-file","page":"Examples and Tutorial","title":"Plot one file","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The provided code  is an example of plotting experimental data in a .csv file:","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"\n# Paths to data, annotation, results, and plots\npath_to_data = \"/example/data_channel_1.csv\"\npath_to_annotation = \"/example/annotation_channel_1_media_M9 + 0.2% Glucose.csv\"\npath_to_plot = \"/example/plots/\"\n\nplot_data(   \"example\", #label of the experiment\n    path_to_data, # path to the folder to analyze\n    path_to_annotation;# path to the annotation of the wells\n    path_to_plot=path_to_plot, # path where to save Plots\n    display_plots=true ,# display plots in julia or not\n    save_plot=true, # save the plot or not\n    overlay_plots=true, # true a single plot for all dataset false one plot per well\n    blank_subtraction=\"avg_blank\" # string on how to use blank (NO,avg_blank,time_avg)\n)","category":"page"},{"location":"05_examples/#Log-Lin-fitting-2","page":"Examples and Tutorial","title":"Log-Lin fitting","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The provided code  is an example of Log-Lin fitting of experimental data in a .csv file:","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"\n# Paths to data, annotation, results, and plots\npath_to_data = \"/example/data_channel_1.csv\"\npath_to_annotation = \"/example/annotation_channel_1_media_M9 + 0.2% Glucose.csv\"\npath_to_results = \"/example/results/\"\npath_to_plot = \"/example/plots/\"\n\nres = fit_one_file_Log_Lin(\n    \"log_lin_WT_CHL_dose_reponse\", #label of the experiment\n    path_to_data, # path to the folder to analyze\n    path_to_annotation;\n  path_to_results = path_to_results,  # path where to save results\n    path_to_plot = path_to_plot,        # path where to save plots\n    do_plot = true,          # do and visualize the plots of data\n    write_res = true,        # write results\n    )","category":"page"},{"location":"05_examples/#Fitting-ODE-Models-2","page":"Examples and Tutorial","title":"Fitting ODE Models","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"The provided code  is an example of fitting a differential equation model to experimental data in a .csv file:","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Define upper and lower bounds for the parameters of the ODE model\nub_dhpm = [0.1, 0.1, 2.0, 5.0]\nlb_dhpm = [0.001, 0.00001, 0.01, 0.5]\n\n# Paths to data, annotation, results, and plots\npath_to_data = \"/example/data_channel_1.csv\"\npath_to_annotation = \"/example/annotation_channel_1_media_M9 + 0.2% Glucose.csv\"\npath_to_results = \"/example/results/\"\npath_to_plot = \"/example/plots/\"\n\n# Fit the ODE model to the experimental data\nres = fit_file_ODE(\n    \"WT_CHL_dose_reponse\",  # label of the experiment\n    path_to_data,            # path to the data\n    path_to_annotation,      # path to the annotation of the wells\n    \"dHPM\",                   # string of the used model\n    lb_dhpm,                  # array of the lower bound of the parameters\n    ub_dhpm;                 # array of the upper bound of the parameters\n    path_to_results = path_to_results,  # path where to save results\n    path_to_plot = path_to_plot,        # path where to save plots\n    do_plot = true,          # do and visualize the plots of data\n    write_res = true,        # write results\n    pt_avg = 2,              # number of points to do smoothing average\n    PopulationSize = 500,    # population size for optimization\n    maxiters = 500000,       # maximum number of iterations\n    abstol = 0.00000000001   # absolute tolerance for optimization\n)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"This example is fitting an ODE model (specifically the \"dHPM\" model) to experimental data provided in CSV files.","category":"page"},{"location":"05_examples/#ODE-segmentation-with-fixed-number-of-change-points","page":"Examples and Tutorial","title":"ODE segmentation with fixed number of change points","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"In this example, we demonstrate the process of fitting a dataset with a sequence of ODEs using a segmentation approach. The dataset is generated with three segments, each modeled by a different ODE. Then we fit it with the 'selectionODEfixedchangepoints' function","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# First segment ODE\nmodel = \"exponential\"\nn_start = [0.1]\ntstart = 0.0\ntmax = 10.0\ndelta_t = 2.0\nparam_of_ode = [0.00]\nsim_1 = ODE_sim(model, n_start, tstart, tmax, delta_t, integrator, param_of_ode)\nsol_1 = reduce(vcat, sim_1)\n\n# Second segment ODE\nmodel = \"logistic\"\nn_start = [sol_1[end]]\ntstart = 10.0\ntmax = 80.0\ndelta_t = 2.0\nparam_of_ode = [0.2, 0.4]\nsim_2 = ODE_sim(model, n_start, tstart, tmax, delta_t, integrator, param_of_ode)\nsol_2 = reduce(vcat, sim_2)\n\n# Third segment ODE\nmodel = \"logistic\"\nn_start = [sol_2[end]]\ntstart = 80.0\ntmax = 200.0\ndelta_t = 2.0\nparam_of_ode = [0.1, 0.8]\nsim_3 = ODE_sim(model, n_start, tstart, tmax, delta_t, integrator, param_of_ode)\nsol_3 = reduce(vcat, sim_3)\n\n# Concatenating simulations\ntimes_sim = vcat(sim_1.t, sim_2.t)\ntimes_sim = vcat(times_sim, sim_3.t)\nsol_sim = vcat(sol_1, sol_2)\nsol_sim = vcat(sol_sim, sol_3)\n\n# Plotting the generated dataset\nPlots.scatter(sol_sim, xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Data \" nothing], color=:blue, size=(300, 300))\n\n# Computing and visualizing the first derivative\ndata_OD = Matrix(transpose(hcat(times_sim, sol_sim)))\nderiv = specific_gr_evaluation(data_OD, 0)\nPlots.scatter(deriv, xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Data \" nothing], color=:blue, size=(300, 300))\n\n# Adding uniform noise to the dataset\nnoise_uniform = rand(Uniform(-0.01, 0.01), length(sol_sim))\ndata_OD = Matrix(transpose(hcat(times_sim, sol_sim)))\ndata_OD[2, :] = data_OD[2, :] .+ noise_uniform\n\n# Plotting the noisy dataset\nPlots.scatter(data_OD[1, :], data_OD[2, :], xlabel=\"Time\", ylabel=\"Arb. Units\", label=[\"Data \" nothing], color=:blue, markersize=2, size=(300, 300))\n\n# Initializing all the models for selection\nub_exp = [0.1]\nlb_exp = [-0.01]\nub_logistic = [0.9, 5.0]\nlb_logistic = [0.0001, 0.001]\nub_hpm = [0.1, 20.0, 50.001]\nlb_hpm = [0.0001, 0.000001, 0.001]\nub_hpm_exp = [0.1, 20.0]\nlb_hpm_exp = [0.0001, 0.0000001]\n\nlist_of_models = [\"exponential\", \"HPM\", \"HPM_exp\", \"logistic\"]\nlist_ub_param = [ub_exp, ub_hpm, ub_hpm_exp, ub_logistic]\nlist_lb_param = [lb_exp, lb_hpm, lb_hpm_exp, lb_logistic]\n\n# Fitting with a fixed number of change points\ntest_fixed_cdp = selection_ODE_fixed_change_points(\n    data_OD, \"test\", \"test\", list_of_models, list_lb_param, list_ub_param, 2;\n    do_plot=true, path_to_plot=path_to_plotting, pt_smooth_derivative=0\n)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"results are stored in testfixedcdp.","category":"page"},{"location":"05_examples/#ODE-segmentation","page":"Examples and Tutorial","title":"ODE segmentation","text":"","category":"section"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"Using the same code as the previous example to generate the data the  fit  is performed with ","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"# Fitting with direct search on the number of change points\n test_cdp = ODE_selection_NMAX_change_points(data_OD,\n    \"test\",\n    \"test\",\n    list_lb_param,\n    list_ub_param,\n    list_of_models,\n   3;\n    do_plot=true,\n path_to_plot=path_to_plotting,\n pt_smooth_derivative=0)","category":"page"},{"location":"05_examples/","page":"Examples and Tutorial","title":"Examples and Tutorial","text":"results are stored in test_cdp.","category":"page"},{"location":"#JMAKi-Julia-Model-based-Analyses-of-microbial-Kinetics","page":"JMAKi - Julia Model-based Analyses of microbial Kinetics","title":"JMAKi - Julia Model-based Analyses of microbial Kinetics","text":"","category":"section"},{"location":"","page":"JMAKi - Julia Model-based Analyses of microbial Kinetics","title":"JMAKi - Julia Model-based Analyses of microbial Kinetics","text":"<div style=\"text-align: center; margin-bottom: 20px;\">\n    <img alt=\"JMAKi logo\" src=\"./assets/logo.png\">\n</div>","category":"page"},{"location":"","page":"JMAKi - Julia Model-based Analyses of microbial Kinetics","title":"JMAKi - Julia Model-based Analyses of microbial Kinetics","text":"JMAKi (a Julia package for Model-based Analyses of microbial Kinetics) is a versatile software tool that utilizes Ordinary Differential Equations (ODEs) to fit bacterial growth data from plate reader experiments.  With JMAKi it is possible to simulate, fit, perform model selection, and conduct sensitivity analysis for multi-well plate reader experiments. The parameter fitting in JMAKi is defined as a constrained optimization problem, which is solved using a differential evolution box-constrained non-linear optimizer.","category":"page"},{"location":"","page":"JMAKi - Julia Model-based Analyses of microbial Kinetics","title":"JMAKi - Julia Model-based Analyses of microbial Kinetics","text":"To address complex cases,  JMAKi preprocesses data by detecting change points in the differential operator (or in the solution of the ODE) within the time series.  It then automatically assembles and fits a segmented ODE model, resulting in a fully interpretable representation of the time series.","category":"page"},{"location":"","page":"JMAKi - Julia Model-based Analyses of microbial Kinetics","title":"JMAKi - Julia Model-based Analyses of microbial Kinetics","text":"Pages = [\n    \"01_install/index.md\",\n    \"02_data/index.md\",\n    \"03_main/index.md\",\n    \"04_math/index.md\",\n    \"05_examples/index.md\"\n]","category":"page"},{"location":"02_data/#data","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"","category":"section"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"JMAKi can operate directly on data files or inside the julia notebook. When are in a julia notebook the  format of single time series that want to be analyzed is a 2 x ntimepoints Matrix of FLoat64, e.g.,","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":" 0.0        2.0       4.0       6.0       8.0        10.0       10.0       12.0       14.0       16.0       18.0       20.0       22.0      24.0      26.0       28.0       30.0       32.0       34.0       36.0       …  \n 0.0912154  0.107956  0.105468  0.101727  0.0931484   0.106318   0.103697   0.139821   0.173598   0.204888   0.251052   0.289018   0.31298   0.33752   0.359356   0.370861   0.376347   0.383732   0.398496   0.384511 …  \n","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"The first row should be time and the second the quantity to be fitted (e.g., Optical Density or CFU)","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"Instead, three APIs call direclty the files: the user must input  the paths to  a .csv data file and a .csv annotation to the functions of JMAKi.jl ; In these cases JMAKi expect for data a matrix where the first row are the names of the wells and the columns the numerical value of the measurements. Note that the first one will be used as time:","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"Time,  A1,     A2,      A3, \n0.0,   0.09,   0.09,    0.087,\n1.0,   0.08,   0.011,   0.012,\n2.0,   0.011,  0.18,    0.1,\n3.0,   0.012,  0.32,    0.22,\n4.0,   0.008,  0.41,    0.122,","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"JMAKi expect a \",\" as separator between columns","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"The annotation file instead should be a two columns .csv file where the number of rows correspond to the number of wells, note that the name of the well should be the same between the data.csv and annotation.csv:","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"A1, b\nA2, X\nA3, unique_ID\n","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"as unique_ID the user can insert anything but consider that if two wells has the same ID the will be considered replicates. 'b' indicates that the well should be cosidered a blank and 'X' that the well should be discarded from any analysis","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"See the folders  XXXXX for some examples. ","category":"page"},{"location":"02_data/","page":"Data and annotation formatting","title":"Data and annotation formatting","text":"If a OD calibration curved is provided it should have the following format XXXXXXX","category":"page"}]
}
